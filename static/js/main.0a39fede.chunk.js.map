{"version":3,"sources":["components/typeColors.js","components/Card.js","components/Pagination.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","src","sprites","front_shiny","alt","name","types","map","eachType","key","type","style","backgroundColor","weight","height","abilities","ability","Pagination","gotoPrevPage","gotoNextPage","onClick","Navbar","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","intialUrl","setInitailUrl","useEffect","a","fetch","res","json","data","loadPokemons","results","next","previous","pokemonResponse","Promise","all","resolve","reject","url","then","pokemonRecord","_pokemonData","textAlign","margin","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a39fede.chunk.js","sourcesContent":["const typeColors = {\r\n    bug: '#729f3f',\r\n    dragon: '#53a4cf',\r\n    fairy: '#fdb9e9',\r\n    fire: '#fd7d24',\r\n    ghost: '#7b62a3',\r\n    ground: '#f7de3f',\r\n    normal: '#a4acaf',\r\n    pyschic: '#f366b9',\r\n    steel: '#9eb7b',\r\n    dark: '#707070',\r\n    electric: '#eed535',\r\n    fighting: '#d56723',\r\n    flying: '#3dc7ef',\r\n    grass: '#9bcc50',\r\n    ice: '#51c4e7',\r\n    poison: '#b97fc9',\r\n    rock: '#a38c21',\r\n    water: '#4592c4'\r\n}\r\n\r\nexport default typeColors;","import React from 'react';\r\nimport './Card.css';\r\nimport typeColors from './typeColors.js'\r\n\r\nconst Card = ({pokemon}) =>{\r\n   return(\r\n     <div className ='Card'>\r\n       <div className = 'Card__img'>\r\n       \t\t\t<img src={pokemon.sprites.front_shiny} alt=\"pokemon\"/>\r\n       </div>\r\n       <div className=\"Card__name\">\r\n               \t {pokemon.name}\r\n       </div>\r\n       <div className='Card__types'>\r\n       {\r\n\t\t         pokemon.types.map(eachType=>{\r\n\t\t         \treturn (\r\n\t\t                <div key={eachType.type.name} className='Card__type' style={{backgroundColor : typeColors[eachType.type.name]}}>\r\n\t\t                  {eachType.type.name}\r\n\t\t                </div> \r\n\t\t         \t\t);\r\n\t\t         })\r\n       }\r\n       </div>\r\n       <div className=\"Card__info\">\r\n\t                <div className=\"Card__data Card__data--weight\">\r\n\t                    <p className=\"title\">Weight</p>\r\n\t                    <p>{pokemon.weight}</p>\r\n\t                </div>\r\n\t                <div className=\"Card__data Card__data--weight\">\r\n\t                    <p className=\"title\">Height</p>\r\n\t                    <p>{pokemon.height}</p>\r\n\t                </div>\r\n\t                <div className=\"Card__data Card__data--ability\">\r\n\t                    <p className=\"title\">Ability</p>\r\n\t                    <p>{pokemon.abilities[0].ability.name}</p>\r\n\t                </div>\r\n            </div>\r\n     </div>\r\n   \t);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport './Pagination.css'\r\n\r\nconst Pagination = ({ gotoPrevPage , gotoNextPage})=>\r\n{\r\n\treturn(\r\n\t\t<div className='btn' >\r\n         {gotoPrevPage && <button onClick={gotoPrevPage}>Prev</button> }\r\n         {gotoNextPage && <button onClick={gotoNextPage}>Next</button>}\r\n        </div> \r\n\t\t);\r\n}\r\n\r\nexport default Pagination;","import React from 'react'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = () =>{\r\n\treturn(\r\n         <div className = 'Navbar top'>\r\n         List of pokemons from pokemon API\r\n         </div>\r\n\t\t);\r\n}\r\n\r\nexport default Navbar;","import React , { useState, useEffect } from 'react';\nimport Card from './components/Card.js'\nimport Pagination from './components/Pagination.js'\nimport Navbar from './components/Navbar.js'\n\nfunction App() {\n  \n  const [pokemonData , setPokemonData] = useState([]);\n  const [nextUrl , setNextUrl] = useState('');\n  const [prevUrl , setPrevUrl] = useState('');\n  const [loading , setLoading] = useState(true);\n  const [intialUrl , setInitailUrl] = useState('https://pokeapi.co/api/v2/pokemon')\n\n  useEffect(() => {\n  async function pokemonResponse(){\n    const res = await fetch(intialUrl);\n    const data = await res.json();\n    await loadPokemons(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n  pokemonResponse();\n  }, [intialUrl])\n\n\n const loadPokemons = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await new Promise((resolve, reject) => {\n        fetch(pokemon.url).then(res => res.json())\n            .then(data => {\n                resolve(data)\n            })\n    });\n      return pokemonRecord\n    }))\n    setPokemonData(_pokemonData);\n  }\n\n function gotoNextPage(){\n  setLoading(true);\n setInitailUrl(nextUrl);\n}\n\n function gotoPrevPage(){\n  setLoading(true);\n  setInitailUrl(prevUrl);\n}\n\n\nreturn (\n  <div>\n    <Navbar />\n    {loading ? <h1 style={{ textAlign: 'center' , margin: '80px'}}>Loading... </h1> : \n    (<>\n      <Pagination\n        gotoPrevPage={prevUrl ? gotoPrevPage : null }\n        gotoNextPage={nextUrl ? gotoNextPage : null}\n      />\n      \n      <div className=\"grid-container\">\n        {\n          pokemonData.map((pokemon,i)=>{\n            return (<Card key={i} pokemon={pokemon}/>);\n          })\n        }\n      </div>\n     </>\n    )\n  }</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}